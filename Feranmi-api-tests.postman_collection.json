{
	"info": {
		"_postman_id": "f6a27f18-b087-44fd-b492-935588cd2d3f",
		"name": "QA Assignment",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40231282"
	},
	"item": [
		{
			"name": "GET – List Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status message is OK\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains data array\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.data).to.be.an('array');\r",
							"    pm.expect(responseJson.data.length).to.be.greaterThan(0);\r",
							"});\r",
							"\r",
							"pm.test(\"First user has required fields\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.data[0]).to.have.property('id');\r",
							"    pm.expect(responseJson.data[0]).to.have.property('email');\r",
							"    pm.expect(responseJson.data[0]).to.have.property('first_name');\r",
							"    pm.expect(responseJson.data[0]).to.have.property('last_name');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "{{api_key}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/users?page=1",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET – Single User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains user data\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.data).to.have.property('id');\r",
							"    pm.expect(responseJson.data.id).to.equal(parseInt(pm.collectionVariables.get(\"user_id\")));\r",
							"    pm.expect(responseJson.data).to.have.property('email');\r",
							"    pm.expect(responseJson.data).to.have.property('first_name');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "{{api_key}}",
						"type": "text"
					},
					{
						"key": "",
						"value": "",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/users/{{user_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET - Single User (Negative Test)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is empty object\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(Object.keys(responseJson)).to.have.lengthOf(0);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "{{api_key}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/users/23",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"23"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST – Create User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Status message is Created\", function () {\r",
							"    pm.response.to.have.status(\"Created\");\r",
							"});\r",
							"\r",
							"pm.test(\"User created successfully\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.name).to.equal(\"Feranmi\");\r",
							"    pm.expect(responseJson.job).to.equal(\"Data Scientist\");\r",
							"    pm.expect(responseJson).to.have.property('id');\r",
							"    pm.expect(responseJson).to.have.property('createdAt');\r",
							"    \r",
							"    // Set created user ID for subsequent requests\r",
							"    pm.collectionVariables.set(\"created_user_id\", responseJson.id);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "x-api-key",
						"value": "{{api_key}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Feranmi\",\r\n    \"job\": \"Data Scientist\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST - Create User (Negative Test)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Request processed\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains submitted data\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.have.property('name');\r",
							"    pm.expect(responseJson).to.have.property('job');\r",
							"    pm.expect(responseJson).to.have.property('id');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"\",\r\n    \"job\": null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST – Register User",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "x-api-key",
						"value": "{{api_key}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"pistol\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/register",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"register"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT – Replace User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status message is OK\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"User updated successfully\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.name).to.equal(\"David\");\r",
							"    pm.expect(responseJson.job).to.equal(\"Lead Data Scientist\");\r",
							"    pm.expect(responseJson).to.have.property('updatedAt');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [
					{
						"key": "x-api-key",
						"value": "{{api_key}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"David\",\r\n    \"job\": \"Lead Data Scientist\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users/{{created_user_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"{{created_user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH – Update User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status message is OK\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"User partially updated\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.job).to.equal(\"Senior Data Scientist\");\r",
							"    pm.expect(responseJson).to.have.property('updatedAt');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PATCH",
				"header": [
					{
						"key": "x-api-key",
						"value": "{{api_key}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"job\": \"Senior Data Scientist\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users/{{created_user_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"{{created_user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE – Delete User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"pm.test(\"Status message is No Content\", function () {\r",
							"    pm.response.to.have.status(\"No Content\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is empty\", function () {\r",
							"    pm.expect(pm.response.text()).to.be.empty;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [
					{
						"key": "x-api-key",
						"value": "{{api_key}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/users/{{created_user_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"{{created_user_id}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "key",
				"value": "x-api-key",
				"type": "string"
			},
			{
				"key": "value",
				"value": "{{Key}}",
				"type": "string"
			},
			{
				"key": "in",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://reqres.in/api",
			"type": "default"
		},
		{
			"key": "user_id",
			"value": "2",
			"type": "default"
		},
		{
			"key": "Key",
			"value": "reqres-free-v1",
			"type": "default"
		},
		{
			"key": "api_key",
			"value": "reqres-free-v1",
			"type": "default"
		},
		{
			"key": "x-api_key",
			"value": "",
			"type": "default"
		},
		{
			"key": "created_user_id",
			"value": ""
		}
	]
}